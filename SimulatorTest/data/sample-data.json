{
    "sampleData": [
      {
        "id": "syntax-errors",
        "name": "Syntax Errors",
        "description": "Sample data with various syntax errors",
        "code": "// Syntax error test\nfunction brokenFunction() {\n    console.log(\"This function has errors\";\n    let x = 10\n    if (x > 5) {\n        console.log(\"x is greater than 5\")\n    }\n}\n\nbrokenFunction()",
        "events": [
          {
            "type": "error",
            "line": 2,
            "character": 41,
            "message": "Missing closing parenthesis",
            "timeOffset": 2000
          },
          {
            "type": "error",
            "line": 3,
            "character": 14,
            "message": "Missing semicolon",
            "timeOffset": 4000
          }
        ]
      },
      {
        "id": "indentation",
        "name": "Indentation Levels",
        "description": "Sample data with various indentation levels",
        "code": "// Indentation test\nfunction nestedFunction() {\n    console.log(\"Level 1\");\n    if (true) {\n        console.log(\"Level 2\");\n        for (let i = 0; i < 3; i++) {\n            console.log(\"Level 3\");\n            if (i === 1) {\n                console.log(\"Level 4\");\n            }\n        }\n    }\n}\n\nnestedFunction();",
        "events": [
          {
            "type": "indentation",
            "line": 2,
            "level": 1,
            "timeOffset": 1000
          },
          {
            "type": "indentation",
            "line": 4,
            "level": 2,
            "timeOffset": 2000
          },
          {
            "type": "indentation",
            "line": 6,
            "level": 3,
            "timeOffset": 3000
          },
          {
            "type": "indentation",
            "line": 8,
            "level": 4,
            "timeOffset": 4000
          }
        ]
      },
      {
        "id": "function-calls",
        "name": "Function Calls",
        "description": "Sample data with various function calls",
        "code": "// Function calls test\nfunction greet(name) {\n    console.log(\"Hello, \" + name + \"!\");\n    return \"Greeting completed\";\n}\n\nfunction calculate(a, b) {\n    return a + b;\n}\n\ngreet(\"User\");\nlet result = calculate(5, 10);\nconsole.log(result);",
        "events": [
          {
            "type": "function",
            "line": 10,
            "name": "greet",
            "timeOffset": 2000
          },
          {
            "type": "function",
            "line": 11,
            "name": "calculate",
            "timeOffset": 3000
          },
          {
            "type": "function",
            "line": 12,
            "name": "console.log",
            "timeOffset": 4000
          }
        ]
      },
      {
        "id": "loops",
        "name": "Loop Iterations",
        "description": "Sample data with various loop types",
        "code": "// Loops test\nfunction loopTest() {\n    // For loop\n    for (let i = 0; i < 5; i++) {\n        console.log(\"For loop iteration: \" + i);\n    }\n    \n    // While loop\n    let j = 0;\n    while (j < 3) {\n        console.log(\"While loop iteration: \" + j);\n        j++;\n    }\n    \n    // Do-while loop\n    let k = 0;\n    do {\n        console.log(\"Do-while iteration: \" + k);\n        k++;\n    } while (k < 2);\n}\n\nloopTest();",
        "events": [
          {
            "type": "loop",
            "line": 3,
            "loopType": "for",
            "timeOffset": 1000
          },
          {
            "type": "loop",
            "line": 9,
            "loopType": "while",
            "timeOffset": 3000
          },
          {
            "type": "loop",
            "line": 16,
            "loopType": "do",
            "timeOffset": 5000
          }
        ]
      },
      {
        "id": "mixed",
        "name": "Mixed Scenario",
        "description": "Sample data with mixed programming scenarios",
        "code": "// Mixed scenario test\nfunction complexFunction(parameter) {\n    // Variable declaration\n    let count = 0;\n    \n    // Conditional statement\n    if (parameter > 10) {\n        // Loop with function call\n        for (let i = 0; i < parameter; i++) {\n            count = processItem(i);\n        }\n    } else {\n        // Syntax error - missing parenthesis\n        console.log(\"Parameter is too small\";\n    }\n    \n    // Nested function\n    function processItem(item) {\n        // Another syntax error - missing semicolon\n        let value = item * 2\n        return value;\n    }\n    \n    return count;\n}\n\n// Function call\ncomplexFunction(15);",
        "events": [
          {
            "type": "indentation",
            "line": 3,
            "level": 1,
            "timeOffset": 1000
          },
          {
            "type": "indentation",
            "line": 7,
            "level": 2,
            "timeOffset": 2000
          },
          {
            "type": "loop",
            "line": 8,
            "loopType": "for",
            "timeOffset": 3000
          },
          {
            "type": "function",
            "line": 9,
            "name": "processItem",
            "timeOffset": 4000
          },
          {
            "type": "error",
            "line": 13,
            "character": 44,
            "message": "Missing closing parenthesis",
            "timeOffset": 5000
          },
          {
            "type": "error",
            "line": 19,
            "character": 27,
            "message": "Missing semicolon",
            "timeOffset": 6000
          },
          {
            "type": "function",
            "line": 26,
            "name": "complexFunction",
            "timeOffset": 7000
          }
        ]
      }
    ]
  }